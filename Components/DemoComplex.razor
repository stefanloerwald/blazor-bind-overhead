@page "/complex"
@page "/complex/{NArg}"

<h3>Demo with more complex markup</h3>

<div style="color: @(Ready ? "forestgreen" : "red")">Please wait until it says ready here: @(Ready? "ready" : "waiting...")</div>

We are waiting until the very first render cycle is complete.

<h5>Can't see a performance issue? Try <a href="complex/@(N * 10)">increasing the number</a> of items rendered.</h5>

<Components.ReferenceComplex />
<Components.ShowsRenderOverheadComplex N="N" />
<Components.ShowsNorenderWorkaroundComplex N="N" />


<hr />

The code for the component that is re-rendered or not is:
<br />
<pre>
@@if (Show)
{
    &lt;button&gt; @@onclick='() => { Value += 1; ValueChanged.InvokeAsync(Value); }'>Increment @@Value to @@(Value + 1)&lt;/button&gt;
}
else
{
    &lt;!--This part is a bit of markup to increase what's being rendered. We don't actually want to spam the rendered output, so we'll just put a dot on screen--&gt;
    &lt;div style="position:absolute; bottom: 16px; right: 16px"&gt;
        &lt;Dot /&gt;
    &lt;/div&gt;
}
</pre>

where <code>&lt;Dot /&gt;</code> is defined as

<pre>
&lt;div&gt;
    &lt;span&gt;&lt;!--Empty--&gt;&lt;/span&gt;
    &lt;div style="width: 1px; height: 1px; background-color: turquoise; color: purple"&gt;&lt;/div&gt;
    &lt;span style="display: none"&gt;This text isn't displayed, but of course &lt;b&gt;there is markup&lt;/b&gt; to be @@if(true) { &lt;i&gt;rendered&lt;/i&gt; }&lt;/span&gt;
&lt;/&lt;div&gt;
</pre>

<code>Show</code> is true for the first item in the list of @N items, and false for all the others.

@code {
    private int N => int.TryParse(NArg, out var n) ? n : 1000;
    [Parameter] public string NArg { get; set; }
    private bool Ready { get; set; }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Ready = true;
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }
}
